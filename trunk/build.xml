<?xml version="1.0" standalone="yes"?>

<project name="lifeguard" basedir="." default="compile">
    <property file="${user.home}/.build.properties"/>
    <property file="${basedir}/.build.properties"/>
    <property file="${basedir}/conf/aws.properties"/>
    <property name="lifeguard" value="${basedir}"/>
    <property name="lifeguard.build" value="${lifeguard}/build" />
    <property name="lifeguard.conf" value="${lifeguard}/conf" />
    <property name="lifeguard.lib" value="lib" />
    <property name="lifeguard.src" value="${lifeguard}/java" />
    <property name="lifeguard.webapp" value="${lifeguard}/webapp" />
	<property name="lifeguard.jar" value="${lifeguard.build}/jar" />
	<property name="lifeguard.build.webapp" value="${lifeguard.build}/webapp" />
	<property name="lifeguard.jar.file" value="${lifeguard.jar}/lifeguard.jar" />
    <property name="lifeguard.classes" value="${lifeguard.build}/classes" />
    <property name="lifeguard.jar.classes" value="${lifeguard.jar}/classes" />
    <property name="lifeguard.generated" value="${lifeguard.build}/generated" />
    <property name="lifeguard.javadoc" value="${lifeguard.build}/apidocs" />
    <property name="lifeguard.dist" value="${lifeguard}/dist" />
    <property name="FLEX_HOME" value="d:/downloads/flex_sdk" />

	<path id="lifeguard.compile.classpath">
		<fileset dir="${lifeguard.lib}">
		</fileset>
		<dirset dir="${lifeguard.classes}"/>
	</path>

	<path id="jaxb.jars">
		<fileset dir="${lifeguard.lib}">
			<include name="jaxb*.jar, activation.jar, jsr173*.jar"/>
		</fileset>
	</path>

	<taskdef name="hotswap" classname="dak.ant.taskdefs.Hotswap" onerror="ignore"/>
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath>
			<fileset dir="${lifeguard.lib}" includes="**/*.jar"/>
		</classpath>
	</taskdef>
	
	<target name="init">
		<tstamp />
		<mkdir dir="${lifeguard.build}" />
		<mkdir dir="${lifeguard.classes}" />
        <mkdir dir="${lifeguard.jar}" />
        <mkdir dir="${lifeguard.javadoc}" />
        <copy toDir="${lifeguard.classes}">
            <fileset dir="${lifeguard.conf}"/>
        </copy>
	</target>

	<target name="schema" depends="init">
        <mkdir dir="${lifeguard.generated}/com/directthought/lifeguard/jaxb"/>
		<echo>compiling the schema files in xsd to java files in ${lifeguard.generated}/com/directthought/lifeguard/jaxb</echo>
		<xjc destdir="${lifeguard.generated}" extension="true" removeOldOutput="yes" package="com.directthought.lifeguard.jaxb">
			<schema dir="xsd" includes="**/*.xsd"/>
			<produces dir="${lifeguard.generated}/com/directthought/lifeguard/jaxb" includes="**/"/>
		</xjc>
	</target>

	<!--compile Java source files-->
	<target name="compile" depends="schema" description="Compile all Java source files">
		<copy toDir="${lifeguard.classes}">
			<fileset dir="xsd" includes="**/*"/>
		</copy>
		<javac srcdir="${lifeguard.generated}" includes="**/*.java" destdir="${lifeguard.classes}" debug="on">
			<classpath refid="lifeguard.compile.classpath" />
		</javac>
		<javac destdir="${lifeguard.classes}" debug="on">
			<src path="${lifeguard.src}" />
			<classpath refid="lifeguard.compile.classpath" />
		</javac>
    </target>


	<target name="check.flex">
		<uptodate property="flexSame" srcfile="flex/Lifeguard.mxml" targetfile="${lifeguard.build.webapp}/lifeguard/Lifeguard.swf"/>
	</target>

	<target name="flex" depends="check.flex" unless="flexSame">
		<taskdef name="mxmlc" classname="flex.ant.MxmlcTask"/>
		<mxmlc file="flex/Lifeguard.mxml" output="${lifeguard.build.webapp}/lifeguard/Lifeguard.swf" as3="true">
			<source-path path-element="${FLEX_HOME}/frameworks"/>
		</mxmlc>
	</target>

	<target name="test.compile" depends="compile" description="Compile test java files">
		<property name="test.src.path" value="test/java"/>
		<javac destdir="${lifeguard.classes}" debug="on">
			<src path="test/java" />
			<classpath refid="lifeguard.compile.classpath" />
		</javac>
    </target>

	<target name="jar" depends="compile">
        <jar destfile="${lifeguard.jar.file}">
			<fileset dir="${lifeguard.classes}">
				<exclude name="**/*.xml"/>
				<exclude name="**/aws.properties"/>
			</fileset>
		</jar>
	</target>

	<target name="hotswap">
		<tstamp>
			<format property="class.tstamp" pattern="MM/dd/yyyy kk:mm:ss" />
		</tstamp>

		<antcall target="compile"/>

		<hotswap verbose="true" port="9000">
			<fileset dir="${lifeguard.classes.dir}" includes="**/*.class">
			<date datetime="${class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
		</fileset>
		</hotswap>
	</target>

	<target name="check.for.tomcat" if="catalina.home">
		<property name="lifeguard.webapp.dist" value="${catalina.home}/webapps/lifeguard"/>
	</target>

	<target name="check.for.java6">
		<condition property="isJava6">
			<contains string="ant.java.version" substring="1.6"/>
		</condition>
	</target>

	<target name="deploy" depends="compile,flex,check.for.tomcat" description="deploy for development file">
		<!-- The line below only defines the property if the target above hasn't already. -->
    	<property name="lifeguard.webapp.dist"  value="${lifeguard.build.webapp}"/>
		<copy toDir="${lifeguard.webapp.dist}">
			<fileset dir="${lifeguard.webapp}" includes="**/*"/>
		</copy>
		<copy toDir="${lifeguard.webapp.dist}">
			<fileset dir="${lifeguard.build.webapp}" includes="**/*.swf"/>
		</copy>
		<mkdir dir="${lifeguard.webapp.dist}/WEB-INF/classes"/>
		<copy toDir="${lifeguard.webapp.dist}/WEB-INF/classes">
			<fileset dir="${lifeguard.classes}" includes="**/*"/>
		</copy>
		<mkdir dir="${lifeguard.webapp.dist}/WEB-INF/lib"/>
		<copy toDir="${lifeguard.webapp.dist}/WEB-INF/lib">
			<fileset dir="${lifeguard.lib}" includes="**/*" excludes="servlet-api.jar,hotswap.jar, jaxb*, jsr*, activation*, itext*"/>
		</copy>
	</target>

	<target name="war" depends="compile,flex" description="Generate war file">
		<copy toDir="${lifeguard.build.webapp}">
			<fileset dir="${lifeguard.webapp}" includes="**/*"/>
		</copy>
		<mkdir dir="${lifeguard.build.webapp}/WEB-INF/classes"/>
		<copy toDir="${lifeguard.build.webapp}/WEB-INF/classes">
			<fileset dir="${lifeguard.classes}" includes="**/*"/>
		</copy>
		<mkdir dir="${lifeguard.build.webapp}/WEB-INF/lib"/>
		<copy toDir="${lifeguard.build.webapp}/WEB-INF/lib">
			<fileset dir="${lifeguard.lib}" includes="**/*" excludes="servlet-api.jar,hotswap.jar"/>
		</copy>
		<jar destfile="${lifeguard.dist}/${ant.project.name}.war" basedir="${lifeguard.build.webapp}"/>
	</target>

	<target name="javadoc" depends="init">
		<javadoc packagenames="com.directthought.*"
				sourcepath="${lifeguard.src}"
				defaultexcludes="yes"
				destdir="${lifeguard.javadoc}"
				author="true"
				version="true"
				use="true"
				windowtitle="Lifeguard - An Amazon Server Pool Manager">
			<classpath refid="lifeguard.compile.classpath"/>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
		</javadoc>
	</target>

	<target name="clean" description="Deletes all the generated artifacts.">
		<delete dir="${lifeguard.build}" />
	</target>

	<target name="dist" depends="clean, jar, javadoc">
		<input message="Enter the version # : " addproperty="rel.version"/>
		<mkdir dir="${lifeguard.dist}"/>
		<zip destfile="${lifeguard.dist}/lifeguard-${rel.version}.zip">
			<fileset file="${lifeguard.jar.file}"/>
			<fileset file="README"/>
			<fileset file="LICENSE.txt"/>
			<fileset file="*.sh"/>
            <fileset dir="${lifeguard}" includes="conf/*"/>
            <fileset dir="${lifeguard}" includes="lib/*"/>
            <fileset dir="${lifeguard}" includes="webapp/**/*"/>
			<fileset dir="${lifeguard.build}">
				<include name="apidocs/**/*"/>
			</fileset>
		</zip>
	</target>

	<target name="run" depends="compile">
		<java fork="true" classname="com.directthought.lifeguard.RunManager">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="conf/poolconfig.xml"/>
			<jvmarg value="-Djava.util.logging.config.file=conf/logging.properties"/>
		</java>
	</target>

	<target name="run.transcode" depends="compile">
		<java fork="true" classname="com.directthought.lifeguard.RunService">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="com.directthought.lifeguard.service.TranscodeService conf/Transcode.xml ${aws.accessId} ${aws.secretKey} dak"/>
			<jvmarg value="-Djava.util.logging.config.file=conf/logging.properties"/>
		</java>
	</target>

	<target name="run.texttopdf" depends="compile">
		<java fork="true" classname="com.directthought.lifeguard.RunService">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="com.directthought.lifeguard.service.TextToPdfService conf/TextToPdf.xml ${aws.accessId} ${aws.secretKey} dak"/>

			<jvmarg value="-Djava.util.logging.config.file=conf/logging.properties"/>
		</java>
	</target>

	<target name="test.main" depends="test.compile">
		<java fork="true" classname="${class}">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="${args}"/>
		</java>
	</target>

	<target name="dequeue" depends="test.compile">
		<java fork="true" classname="DequeueSample">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="${queue}"/>
		</java>
	</target>

	<target name="enqueue" depends="test.compile">
		<java fork="true" classname="EnqueueSample">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="${queue} ${msg}"/>
		</java>
	</target>

	<target name="setstate" depends="test.compile">
		<java fork="true" classname="SetState">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="${statusqueue} ${id} ${state} ${duration}"/>
		</java>
	</target>

	<target name="addwork" depends="test.compile">
		<java fork="true" classname="AddWork">
			<classpath>
				<path refid="lifeguard.compile.classpath"/>
				<pathelement location="${lifeguard.classes}"/>
			</classpath>
			<arg line="${workqueue}"/>
		</java>
	</target>
</project>

